pipeline {
    agent any

    environment {
        REPO_URL = 'https://github.com/vimansasham/Devops-Project'
        BRANCH = 'master'
        FRONTEND_IMAGE = 'vimansa/institute-management-system'
        BUILD_NUMBER = "${env.BUILD_NUMBER}"
    }

    stages {
        stage('SCM Checkout') {
            steps {
                retry(3) {
                    git branch: "${env.BRANCH}", url: "${env.REPO_URL}"
                }
            }
        }

        stage('Check Directory Structure') {
            steps {
                script {
                    bat 'dir "Institute Management System" || echo "Directory not found!"'
                }
            }
        }

        stage('Build Docker Images') {
            when {
                expression {
                    return fileExists('Institute Management System')
                }
            }
            steps {
                script {
                    try {
                        bat "docker build -t ${env.FRONTEND_IMAGE}:${env.BUILD_NUMBER} \"Institute Management System\""
                    } catch (Exception e) {
                        echo "Error during Docker build: ${e.message}"
                        currentBuild.result = 'FAILURE'
                        error("Stopping pipeline due to Docker build error")
                    }
                }
            }
        }

        stage('Login to Docker Hub') {
            when {
                expression {
                    return currentBuild.result == null || currentBuild.result == 'SUCCESS'
                }
            }
            steps {
                withCredentials([string(credentialsId: 'test-dockerhubpassword', variable: 'DOCKERHUB_PASSWORD')]) {
                    bat "docker login -u vimansa -p ${DOCKERHUB_PASSWORD}"
                }
            }
        }

        stage('Push Images') {
            when {
                expression {
                    return currentBuild.result == null || currentBuild.result == 'SUCCESS'
                }
            }
            steps {
                script {
                    bat "docker push ${env.FRONTEND_IMAGE}:${env.BUILD_NUMBER}"
                }
            }
        }

        stage('Deploy Containers') {
            when {
                expression {
                    return currentBuild.result == null || currentBuild.result == 'SUCCESS'
                }
            }
            steps {
                script {
                    bat "docker-compose -f \"Institute Management System/docker-compose.yml\" up -d"
                }
            }
        }
    }

    post {
        always {
            bat 'docker logout'
        }
    }
}
